function Find-DzrUser {
    <#
    .SYNOPSIS
    Finds users on the music streaming service Deezer.

    .DESCRIPTION
    The Find-DzrUser cmdlet finds users on the online music streaming service
    Deezer, by using the REST API of the service. It returns objects with the 
    UserID property, amongst others, which can be piped to other Cmdlets (such
    as Get-DzrPlayList) to retrieve other data.

    The Cmdlet can be used through a proxy server, when succesfully
    authenticated. The -Proxy and -ProxyCredential parameters serve this
    purpose. When the -ProxyCredential parameter is ommited while
    using the -Proxy parameter, the default credentials of the logged on user
    will be used to authenticate to the proxy.

    The Cmdlet returns Selected.System.Management.Automation.PSCustomObject
    objects.

    The Cmdlet returns a maximum of 300 results.

    .PARAMETER Name
    Specifies the name or part of the name of the user to search for. If no
    user are found, the result is $null (no error will be generated).

    .PARAMETER Proxy
    Uses a proxy server for the request, rather than connecting directly to the
    Internet resource. Enter the URI of a network proxy server.
   
    .PARAMETER ProxyCredential
    Specifies a user account that has permission to use the proxy server that is
    specified by the -Proxy parameter.
    
    Type a user name, such as "User01" or "Domain01\User01", "User@Domain.Com",
    or enter a `PSCredential` object, such as one generated by the
    `Get-Credential` cmdlet.
    
    This parameter is valid only when the -Proxy parameter is also used in the
    command.

    .INPUTS
    System.String

    .OUTPUTS
    Selected.System.Management.Automation.PSCustomObject

    .NOTES
    The Find-DzrUser Cmdlet can be used to retrieve the Deezer UserID of a
    specific useraccount on Deezer. Note however that the search is executed 
    by the Deezer API and that results may not be as expected, because of
    settings of the Deezer User Account or applied policies at Deezer.
    If the Deezer UserID cannot be found by this Cmdlet, revert to the Deezer
    website.

    .LINK
    https://www.deezer.com  

    .EXAMPLE
    Find-DzrUser hans | Format-Table

    Name                           UserID Type UriPicture1
    ----                           ------ ---- -----------                                                                             
    Zack Hans                    34650931 user https://e-cdns-images.dzcdn.ne...
    Thibaut Hans                 66403651 user https://e-cdns-images.dzcdn.ne...
    Hans Risch                  248723915 user https://e-cdns-images.dzcdn.ne...
    hans67                        2531340 user https://e-cdns-images.dzcdn.ne...
    Matheus Hans                287495323 user https://e-cdns-images.dzcdn.ne...
    hans28                       20024545 user https://e-cdns-images.dzcdn.ne...
    ...

    Description: Finds users on Deezer, formatted as a table.

    .EXAMPLE
    Find-DzrUser hans -Proxy "http://this.proxy.com:3128"

    Description: The -Proxy parameter specifies the address of the proxy, used
    to connect to the internet. Because the -ProxyCredential parameter is not
    used, the default credentials of the logged on user will be used to
    authenticate to the proxy.

    .EXAMPLE
    Find-DzrUser hans -Proxy "http://this.proxy.com:3128" -ProxyCredential hans

    Description: The -Proxy parameter specifies the address of the proxy, used
    to connect to the internet. Because the -ProxyCredential parameter is
    used to identify the credentials, the command will prompt for a password.
#>
    [cmdletbinding(DefaultParameterSetName = 'NoProxy')]
    Param(
        [Parameter(ParameterSetName = 'NoProxy', Position = 0, Mandatory = $true)]
        [Parameter(ParameterSetName = 'WithProxy', Position = 0, Mandatory = $true)]    
        [Alias('Filter')]
        [string]$Name,

        [Parameter(ParameterSetName = 'WithProxy', Mandatory = $true)]
        [uri]$Proxy,
        
        [Parameter(ParameterSetName = 'WithProxy')]
        [ValidateNotNull()]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]
        [PSCredential]$ProxyCredential = [System.Management.Automation.PSCredential]::Empty
    ) # Param
        
    BEGIN {
        Write-Verbose ""
        Write-Verbose "--- Executing Metadata ---"
        Write-Verbose "User = $($env:userdomain)\$($env:USERNAME)"
        Write-Verbose "Is Admin = $IsAdmin"
        Write-Verbose "Computername = $env:COMPUTERNAME"
        Write-Verbose "Host = $($host.Name)"
        Write-Verbose "PSVersion = $($PSVersionTable.PSVersion)"
        Write-Verbose "Runtime = $(Get-Date)"
        Write-Verbose "--- End Metadata ---"
        Write-Verbose ""
    }
        
    PROCESS {
        # Get first page of data
        $URL = "https://api.deezer.com/search/user?q='" + $Name + "'"

        If ($PSCmdlet.ParameterSetName -eq "NoProxy") {
            $Users = Invoke-RestMethod -Uri $URL
        }
        elseif (($PSCmdlet.ParameterSetName -eq "WithProxy") -and ($PSBoundParameters.ContainsKey('ProxyCredential') -eq $false)) {
            $Users = Invoke-RestMethod -Uri $URL -Proxy $Proxy -ProxyUseDefaultCredentials
        }
        else {
            $Users = Invoke-RestMethod -Uri $URL -Proxy $Proxy -ProxyCredential $ProxyCredential
        }
            
        do {
            # Output the current page of data
            $Users.data | Select-Object -Property @{name = 'Name'; expression = {$_.name}},
                                                  @{name = 'UserID'; expression = {$_.id}},
                                                  @{name = 'Type'; expression = {$_.type}},
                                                  @{name = 'UriPicture1'; expression = {$_.picture_small}},
                                                  @{name = 'UriPicture2'; expression = {$_.picture}},
                                                  @{name = 'UriPicture3'; expression = {$_.picture_medium}},
                                                  @{name = 'UriPicture4'; expression = {$_.picture_big}},
                                                  @{name = 'UriPicture5'; expression = {$_.picture_xl}},
                                                  @{name = 'UriTracklist'; expression = {$_.tracklist}}

            # Get the following pages of data
            if ($Users.next) {
                $MorePages = $true
                If ($PSCmdlet.ParameterSetName -eq "NoProxy") {
                    $Users = Invoke-RestMethod -uri $Users.next
                }
                elseif (($PSCmdlet.ParameterSetName -eq "WithProxy") -and ($PSBoundParameters.ContainsKey('ProxyCredential') -eq $false)) {
                    $Users = Invoke-RestMethod -uri $Users.next -Proxy $Proxy -ProxyUseDefaultCredentials
                }
                else {
                    $Users = Invoke-RestMethod -uri $Users.next -Proxy $Proxy -ProxyCredential $ProxyCredential
                }
            }
            else {
                $MorePages = $false
            }
        } while ($MorePages) # Process the next page of data
    
        # The Deezer API gives a maximum of 300 results. Warn when this limit is reached.
        If ($Users.total -ge 300) {
            Write-Warning "Maximum number of objects reached (300), the result may be incomplete.`nTry a more specific search."
        }
    
    } # PROCESS
        
    END {} # END
        
} # Function

function Get-DzrPlaylist {
    [cmdletbinding(DefaultParameterSetName = 'ByPlaylistIDAndNoProxy')]
    Param(
        [Parameter(ParameterSetName = 'ByPlaylistIDAndNoProxy', Position = 0, Mandatory = $true, ValueFromPipelineByPropertyName = $true)]
        [Parameter(ParameterSetName = 'ByPlaylistIDAndWithProxy', Position = 0, Mandatory = $true, ValueFromPipelineByPropertyName = $true)]
        [Int64]$PlaylistID,

        [Parameter(ParameterSetName = 'ByUserIDAndNoProxy', Position = 0, Mandatory = $true, ValueFromPipelineByPropertyName = $true)]
        [Parameter(ParameterSetName = 'ByUserIDAndWithProxy', Position = 0, Mandatory = $true, ValueFromPipelineByPropertyName = $true)]
        [Int64]$UserID,
        
        [Parameter(ParameterSetName = 'ByPlaylistIDAndNoProxy', Position = 1, Mandatory = $false)]
        [Parameter(ParameterSetName = 'ByPlaylistIDAndWithProxy', Position = 1, Mandatory = $false)]
        [Parameter(ParameterSetName = 'ByUserIDAndNoProxy', Position = 1, Mandatory = $false)]
        [Parameter(ParameterSetName = 'ByUserIDAndWithProxy', Position = 1, Mandatory = $false)] 
        [int16]$Limit = 1000,

        [Parameter(ParameterSetName = 'ByPlaylistIDAndWithProxy', Mandatory = $true)]
        [Parameter(ParameterSetName = 'ByUserIDAndWithProxy', Mandatory = $true)]
        [uri]$Proxy,
        
        [Parameter(ParameterSetName = 'ByPlaylistIDAndWithProxy')]
        [Parameter(ParameterSetName = 'ByUserIDAndWithProxy')]
        [ValidateNotNull()]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]
        [PSCredential]$ProxyCredential = [System.Management.Automation.PSCredential]::Empty
    ) # Param
        
    BEGIN {
        Write-Verbose ""
        Write-Verbose "--- Executing Metadata ---"
        Write-Verbose "User = $($env:userdomain)\$($env:USERNAME)"
        Write-Verbose "Is Admin = $IsAdmin"
        Write-Verbose "Computername = $env:COMPUTERNAME"
        Write-Verbose "Host = $($host.Name)"
        Write-Verbose "PSVersion = $($PSVersionTable.PSVersion)"
        Write-Verbose "Runtime = $(Get-Date)"
        Write-Verbose "--- End Metadata ---"
        Write-Verbose ""
    }
        
    PROCESS {
        # Determine URL, either by Playlist- or UserID
        if (($PSCmdlet.ParameterSetName -eq "ByUserIDAndNoProxy") -or ($PSCmdlet.ParameterSetName -eq "ByUserIDAndWithProxy")) {
            $URL = "https://api.deezer.com/user/" + $UserID +  "/playlists?limit=" + $Limit   
        } elseif (($PSCmdlet.ParameterSetName -eq "ByPlaylistIDAndNoProxy") -or ($PSCmdlet.ParameterSetName -eq "ByPlaylistIDAndWithProxy")) {
            $URL = "https://api.deezer.com/playlist/" + $PlaylistID
        }

        # Get data, in different proxy situations
        If (($PSCmdlet.ParameterSetName -eq "ByPlaylistIDAndNoProxy") -or ($PSCmdlet.ParameterSetName -eq "ByUserIDAndNoProxy")) {
            $Playlists = Invoke-RestMethod -Uri $URL
        }
        elseif (($PSCmdlet.ParameterSetName -eq "ByPlaylistIDAndWithProxy" -or ($PSCmdlet.ParameterSetName -eq "ByUserIDAndWithProxy")) -and ($PSBoundParameters.ContainsKey('ProxyCredential') -eq $false)) {
            $Playlists = Invoke-RestMethod -Uri $URL -Proxy $Proxy -ProxyUseDefaultCredentials
        }
        else {
            $Playlists = Invoke-RestMethod -Uri $URL -Proxy $Proxy -ProxyCredential $ProxyCredential
        }

        # Output result
        if (($PSCmdlet.ParameterSetName -eq "ByUserIDAndNoProxy") -or ($PSCmdlet.ParameterSetName -eq "ByUserIDAndWithProxy")) {
            $Playlists.data | Select-Object @{Name='Title';Expression={$_.title}},
                                            @{Name='PlaylistID';Expression={$_.id}},
                                            @{name='Type'; expression = {$_.type}},
                                            @{name='Creator'; expression = {$_.creator.name}},
                                            @{name='CreatorID'; expression = {$_.creator.id}},
                                            @{name='CreationDate'; expression = {$_.creation_date}},
                                            @{Name='Tracks';Expression={$_.nb_tracks}},
                                            @{Name='Duration';Expression={"{0:HH:mm:ss}" -f ([datetime][timespan]::fromseconds($_.duration).Ticks)}},
                                            @{Name='Fans';Expression={$_.fans}},
                                            @{Name='Rating';Expression={$_.rating}},
                                            @{Name='Public';Expression={$_.public}},
                                            @{Name='Collaborative';Expression={$_.collaborative}},
                                            @{Name='Uri';Expression={$_.link}},
                                            @{name='UriPicture1'; expression = {$_.picture_small}},
                                            @{name='UriPicture2'; expression = {$_.picture}},
                                            @{name='UriPicture3'; expression = {$_.picture_medium}},
                                            @{name='UriPicture4'; expression = {$_.picture_big}},
                                            @{name='UriPicture5'; expression = {$_.picture_xl}},
                                            @{name='UriTracklist'; expression = {$_.tracklist}},
                                            @{name='Checksum'; expression = {$_.checksum}}
        } elseif (($PSCmdlet.ParameterSetName -eq "ByPlaylistIDAndNoProxy") -or ($PSCmdlet.ParameterSetName -eq "ByPlaylistIDAndWithProxy")) {
            $Playlists | Select-Object @{Name='Title';Expression={$_.title}},
                                       @{Name='PlaylistID';Expression={$_.id}},
                                       @{name='Type'; expression = {$_.type}},
                                       @{Name='Description';Expression={$_.description}},
                                       @{name='Creator'; expression = {$_.creator.name}},
                                       @{name='CreatorID'; expression = {$_.creator.id}},
                                       @{name='CreationDate'; expression = {$_.creation_date}},
                                       @{Name='Tracks';Expression={$_.nb_tracks}},
                                       @{Name='Duration';Expression={"{0:HH:mm:ss}" -f ([datetime][timespan]::fromseconds($_.duration).Ticks)}},
                                       @{Name='Fans';Expression={$_.fans}},
                                       @{Name='Rating';Expression={$_.rating}},
                                       @{Name='Public';Expression={$_.public}},
                                       @{Name='Collaborative';Expression={$_.collaborative}},
                                       @{Name='Uri';Expression={$_.link}},
                                       @{name='UriPicture1'; expression = {$_.picture_small}},
                                       @{name='UriPicture2'; expression = {$_.picture}},
                                       @{name='UriPicture3'; expression = {$_.picture_medium}},
                                       @{name='UriPicture4'; expression = {$_.picture_big}},
                                       @{name='UriPicture5'; expression = {$_.picture_xl}},
                                       @{name='UriTracklist'; expression = {$_.tracklist}},
                                       @{Name='UriShare';Expression={$_.share}},
                                       @{name='Checksum'; expression = {$_.checksum}}
        }

    } # PROCESS
        
    END {} # END
        
} # Function